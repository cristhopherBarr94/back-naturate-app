const express = require("express");
const multer = require("multer");
const Post = require("../models/posts");
const router = express.Router();
// import cors libraries
const cors = require("cors");
// import the auth middleware
const checkAuth = require("../middleware/check-auth");

// MIME_TYPE_MAP define the allowed types of file img
const MIME_TYPE_MAP = {
  "image/png": "png",
  "image/jpeg": "jpg",
  "image/jpg": "jpg",
};

// create storage variable to define where multer put the files
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // create a validation for file extention
    // returns null if the file extention isn't in the allowed exentions array defined by MIME_TYPE_MAP variables
    const isValid = MIME_TYPE_MAP[file.mimetype];
    let error = new Error("invalid mime type");
    if (isValid) {
      error = null;
    }
    // the callback function receives the following arguments:
    // first argument is the action whether you detected some error
    // second argumet is the relative path of the folder where you want to storage the files
    cb(error, "backend/images");
  },
  filename: (req, file, cb) => {
    // get the file name and replaces de blank spaces ' ' with '-'
    const name = file.originalname.toLocaleLowerCase().split(" ").join("-");
    // get the allowed extentions
    const ext = MIME_TYPE_MAP[file.mimetype];
    // create a path with a timestamp and the file extention
    //first parameter is the action to do
    //second parameter is the path for the new file saved
    cb(null, name + "-" + Date.now() + "." + ext);
  },
});

// post method

router.post(
  "",
  cors(),
  checkAuth,
  multer({ storage: storage }).single("image"),
  (req, res, next) => {
    //   create an url to the image file
    const url = req.protocol + "://" + req.get("host");
    const post = new Post({
      create_by: req.userData.userId,
      creation_date: Date.now(),
      img: url + "/images/" + req.file.filename,
      title: req.body.title,
      description: req.body.description,
    });

    // save data post to mongo database,
    // the save funtion is only avaliable if a model is created with mongosee
    post.save().then((created) => {
      res.status(201).json({
        message: "Post created successfully!",
        post: {
          // cerate a copy of the data with spread operator
          ...created,
          // replace the id null passed from post service to the autogenerated mongoose id
          id: created._id,
        },
      });
    });
  }
);

// get list method
router.get("", cors(), (req, res, next) => {
  // define query parameters
  // plus icon  "+" transform the query data in number variables
  const pagesize = +req.query.pagesize;
  const currentPage = +req.query.page;

  let postFetched;
  // fetch data from the posts collection in mongo database
  // find is a mongoose model exclusive funtion that returns all entries in the colection
  const postQuery = Post.find();
  if (pagesize && currentPage) {
    // the mongoose skip method let us to skip n elements in the request
    // limit method limits the amount of documents the request return
    postQuery.skip(pagesize * (currentPage - 1)).limit(pagesize);
  }

  postQuery
    .then((documents) => {
      // fetch documents and save it in a variable
      postFetched = documents;
      // count the amount of existing post in the db and return it
      return Post.count();
    })
    .then((count) => {
      // send the object only if the response status is ok
      res.status(200).json({
        message: "posts fetched successfuly",
        posts: postFetched,
        maxPosts: count,
      });
    });
});

// get post by user _id
router.get("/postByUser", cors(), checkAuth, (req, res, next) => {
  console.log("lista de posts por usuario");
  Post.find()
    .where("create_by")
    .in(req.userData.userId)
    .exec((err, records) => {
      if (!records) {
        res.status(404).json({ message: "No post added!" });
        return;
      }
      res.status(200).json({ user_post: records });
    });
});

// endpoint to fetch data inreload event from edit form
router.get("/:id", cors(), (req, res, next) => {
  Post.findById(req.params.id).then((filteredPost) => {
    if (filteredPost) {
      res.status(200).json(filteredPost);
    } else {
      res.status(404).json({ message: "Post not found!" });
    }
  });
});

// put post method
router.put(
  "/:id",
  cors(),
  checkAuth,
  multer({ storage: storage }).single("image"),
  (req, res, next) => {
    let imagePath = req.body.img;
    if (req.file) {
      //   create an url to the image file
      const url = req.protocol + "://" + req.get("host");
      imagePath = url + "/images/" + req.file.filename;
    }
    const url = req.protocol + "://" + req.get("host");

    const postUpdated = new Post({
      _id: req.body.id,
      title: req.body.title,
      description: req.body.description,
      img: imagePath,
      create_by: req.userData.userId,
      creation_date: Date.now(),
    });

    // use updateOne mongoose method to update data post
    // the first parameter is the element id to be updated and the second parameter is the object with the new content
    // this first parameter also contains a validation of the user id in order to just let the creator delete or modify his own content
    Post.updateOne(
      { _id: req.params.id, create_by: req.userData.userId },
      postUpdated
    ).then((result) => {
      if (result.n > 0) {
        res.status(200).json({ message: "Post has been updated successfuly!" });
      } else {
        res.status(401).json({ message: "Not authorized!" });
      }
    });
  }
);

// delete operation
router.delete("/:id", cors(), checkAuth, (req, res, next) => {
  // use deleteOne method from mongoose to delete a single item by their id
  // this first parameter also contains a validation of the user id in order to just let the creator delete or modify his own description
  Post.deleteOne({ _id: req.params.id, create_by: req.userData.userId }).then(
    (postDeleted) => {
      if (postDeleted.n > 0) {
        res.status(200).json({ message: "Post deleted successfuly!" });
      } else {
        res.status(404).json({ message: "Not Authorized!" });
      }
    }
  );
});

module.exports = router;
